// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parser when parsing HTML should fail when parsing an incomplete element 1`] = `
"ERROR: Invalid token
  1 | <div class=\\"foo {{bar}}\\" id=\\"{{id}}\\"

A tag must consist of attributes or expressions. Twig Tags are not allowed."
`;

exports[`Parser when parsing HTML should fail when parsing an opening expression attribute 1`] = `
"ERROR: Unexpected token \\"EOF\\" of value \\"\\"
  1 | <div {{"
`;

exports[`Parser when parsing HTML should match HTML comments 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [
        Object {
          "type": "HtmlComment",
          "value": Object {
            "type": "StringLiteral",
            "value": "<!--//-->",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "span",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match HTML comments mixed with other text 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "
            First some text
            
            ",
          },
        },
        Object {
          "type": "HtmlComment",
          "value": Object {
            "type": "StringLiteral",
            "value": "<!-- Then a comment-->",
          },
        },
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "
            ",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "span",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match a simple element 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "test",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "div",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match an element with an expression attribute 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "id",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "name": "id",
            "type": "Identifier",
          },
        },
      ],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "test",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "div",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match an element with attributes 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "class",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "left": Object {
              "type": "StringLiteral",
              "value": "foo ",
            },
            "operator": "~",
            "right": Object {
              "name": "bar",
              "type": "Identifier",
            },
            "type": "BinaryConcatExpression",
            "wasImplicitConcatenation": true,
          },
        },
        Object {
          "name": Object {
            "name": "id",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "name": "id",
            "type": "Identifier",
          },
        },
      ],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "test",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "div",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match expression arguments 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": "attributes",
          "type": "Identifier",
        },
      ],
      "children": Array [],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "img",
      "selfClosing": true,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match nested elements with attributes 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "class",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "left": Object {
              "type": "StringLiteral",
              "value": "foo ",
            },
            "operator": "~",
            "right": Object {
              "name": "bar",
              "type": "Identifier",
            },
            "type": "BinaryConcatExpression",
            "wasImplicitConcatenation": true,
          },
        },
        Object {
          "name": Object {
            "name": "id",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "name": "id",
            "type": "Identifier",
          },
        },
      ],
      "children": Array [
        Object {
          "attributes": Array [],
          "children": Array [
            Object {
              "type": "PrintTextStatement",
              "value": Object {
                "type": "StringLiteral",
                "value": "hello",
              },
            },
          ],
          "elementNameLoc": Object {
            "column": 38,
            "index": 38,
            "line": 1,
          },
          "name": "div",
          "selfClosing": false,
          "type": "Element",
        },
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": " world",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "div",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match self-closing tags 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "img",
      "selfClosing": true,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match self-closing tags with / 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "img",
      "selfClosing": true,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should match standalone attributes 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "type",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "type": "StringLiteral",
            "value": "checkbox",
          },
        },
        Object {
          "name": Object {
            "name": "checked",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": null,
        },
      ],
      "children": Array [],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "input",
      "selfClosing": true,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should parse a doctype declaration containing an expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "declarationType": "DOCTYPE",
      "parts": Array [
        Object {
          "type": "PrintExpressionStatement",
          "value": Object {
            "name": "theDocType",
            "type": "Identifier",
          },
        },
      ],
      "type": "Declaration",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should parse an HTML 4 doctype declaration 1`] = `
Object {
  "expressions": Array [
    Object {
      "declarationType": "DOCTYPE",
      "parts": Array [
        Object {
          "name": "HTML",
          "type": "Identifier",
        },
        Object {
          "name": "PUBLIC",
          "type": "Identifier",
        },
        Object {
          "type": "StringLiteral",
          "value": "-//W3C//DTD HTML 4.01//EN",
        },
        Object {
          "type": "StringLiteral",
          "value": "http://www.w3.org/TR/html4/strict.dtd",
        },
      ],
      "type": "Declaration",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should parse an HTML 5 doctype declaration 1`] = `
Object {
  "expressions": Array [
    Object {
      "declarationType": "DOCTYPE",
      "parts": Array [
        Object {
          "name": "html",
          "type": "Identifier",
        },
      ],
      "type": "Declaration",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should parse an HTML 5 doctype declaration with whitespace after ! 1`] = `
Object {
  "expressions": Array [
    Object {
      "declarationType": "DOCTYPE",
      "parts": Array [
        Object {
          "name": "html",
          "type": "Identifier",
        },
      ],
      "type": "Declaration",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should respect applyWhitespaceTrimming setting 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "title",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "left": Object {
              "left": Object {
                "type": "StringLiteral",
                "value": "Testing: ",
              },
              "operator": "~",
              "right": Object {
                "name": "noWhitespaceTest",
                "trimLeft": true,
                "trimRight": true,
                "type": "Identifier",
              },
              "type": "BinaryConcatExpression",
              "wasImplicitConcatenation": false,
            },
            "operator": "~",
            "right": Object {
              "type": "StringLiteral",
              "value": " foo",
            },
            "type": "BinaryConcatExpression",
            "wasImplicitConcatenation": true,
          },
        },
      ],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "Test",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "span",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should respect the decodeEntities option 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "&#8206;",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "span",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should respect the preserveSourceLiterally option 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "&#8206;",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "span",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing HTML should throw a controlled error on an interrupted doctype declaration 1`] = `
[Error: ERROR: Expected string, symbol, or expression
  1 | <!DOCTYPE 

Only strings or symbols can be part of a declaration]
`;

exports[`Parser when parsing Twig comments should match a comment 1`] = `
Object {
  "expressions": Array [
    Object {
      "type": "TwigComment",
      "value": Object {
        "type": "StringLiteral",
        "value": "{# This is a comment #}",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing Twig comments should preserve whitespace between comments 1`] = `
Object {
  "expressions": Array [
    Object {
      "type": "TwigComment",
      "value": Object {
        "type": "StringLiteral",
        "value": "{# First comment #}",
      },
    },
    Object {
      "type": "PrintTextStatement",
      "value": Object {
        "type": "StringLiteral",
        "value": "
            
            ",
      },
    },
    Object {
      "type": "TwigComment",
      "value": Object {
        "type": "StringLiteral",
        "value": "{# Second comment #}",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing array expressions should allow trailing commas 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "elements": Array [
          Object {
            "name": "a",
            "type": "Identifier",
          },
          Object {
            "name": "b",
            "type": "Identifier",
          },
        ],
        "type": "ArrayExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing array expressions should match a complex array access 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "computed": true,
        "object": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "property": Object {
          "arguments": Array [
            Object {
              "type": "NumericLiteral",
              "value": 2,
            },
          ],
          "callee": Object {
            "computed": false,
            "object": Object {
              "name": "foo",
              "type": "Identifier",
            },
            "property": Object {
              "name": "bar",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
          "type": "CallExpression",
        },
        "type": "MemberExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing array expressions should match a string array access 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "computed": true,
        "object": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "property": Object {
          "type": "StringLiteral",
          "value": "hello",
        },
        "type": "MemberExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing array expressions should match an array access 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "computed": true,
        "object": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "property": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing array expressions should match an indexed array access 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "computed": true,
        "object": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "property": Object {
          "type": "NumericLiteral",
          "value": 0,
        },
        "type": "MemberExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing conditional expressions should match a simple conditional 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "alternate": Object {
          "name": "bar",
          "type": "Identifier",
        },
        "consequent": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "test": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing conditional expressions should match a simple conditional with empty alternate 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "alternate": Object {
          "type": "StringLiteral",
          "value": "",
        },
        "consequent": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "test": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing conditional expressions should match an if-otherwise expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "alternate": Object {
          "name": "bar",
          "type": "Identifier",
        },
        "consequent": null,
        "test": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing conditional expressions should match an if-then expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "alternate": null,
        "consequent": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "test": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "ConditionalExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing expressions should match an identifier 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "name": "hello",
        "type": "Identifier",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing expressions should match null, true and false literals 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "alternate": Object {
          "type": "BooleanLiteral",
          "value": true,
        },
        "consequent": Object {
          "type": "BooleanLiteral",
          "value": false,
        },
        "test": Object {
          "arguments": Array [
            Object {
              "type": "NullLiteral",
              "value": null,
            },
          ],
          "name": Object {
            "name": "default",
            "type": "Identifier",
          },
          "target": Object {
            "name": "a",
            "type": "Identifier",
          },
          "type": "FilterExpression",
        },
        "type": "ConditionalExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing expressions should match numeric subscript expressions 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "computed": true,
        "object": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "property": Object {
          "type": "NumericLiteral",
          "value": 2,
        },
        "type": "MemberExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing filter expressions should match a filter with arguments 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [
          Object {
            "type": "NumericLiteral",
            "value": 1,
          },
          Object {
            "type": "NumericLiteral",
            "value": 3,
          },
        ],
        "name": Object {
          "name": "slice",
          "type": "Identifier",
        },
        "target": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "FilterExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing filter expressions should match a simple filter 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [],
        "name": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "target": Object {
          "name": "test",
          "type": "Identifier",
        },
        "type": "FilterExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing filter expressions should match multiple filters 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [],
        "name": Object {
          "name": "raw",
          "type": "Identifier",
        },
        "target": Object {
          "arguments": Array [
            Object {
              "type": "NumericLiteral",
              "value": 1,
            },
            Object {
              "type": "NumericLiteral",
              "value": 3,
            },
          ],
          "name": Object {
            "name": "slice",
            "type": "Identifier",
          },
          "target": Object {
            "name": "foo",
            "type": "Identifier",
          },
          "type": "FilterExpression",
        },
        "type": "FilterExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing function call expressions should match a function call 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [],
        "callee": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "type": "CallExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing function call expressions should match a function call with a map expression argument 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [
          Object {
            "properties": Array [
              Object {
                "computed": false,
                "key": Object {
                  "name": "test",
                  "type": "Identifier",
                },
                "type": "ObjectProperty",
                "value": Object {
                  "type": "StringLiteral",
                  "value": "bar",
                },
              },
              Object {
                "computed": false,
                "key": Object {
                  "name": "foo",
                  "type": "Identifier",
                },
                "type": "ObjectProperty",
                "value": Object {
                  "name": "test",
                  "type": "Identifier",
                },
              },
            ],
            "type": "ObjectExpression",
          },
          Object {
            "elements": Array [
              Object {
                "type": "NumericLiteral",
                "value": 1,
              },
              Object {
                "type": "NumericLiteral",
                "value": 2,
              },
              Object {
                "type": "NumericLiteral",
                "value": 3,
              },
              Object {
                "name": "test",
                "type": "Identifier",
              },
            ],
            "type": "ArrayExpression",
          },
        ],
        "callee": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "type": "CallExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing function call expressions should match a function call with named arguments 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "arguments": Array [
          Object {
            "name": Object {
              "name": "first",
              "type": "Identifier",
            },
            "type": "NamedArgumentExpression",
            "value": Object {
              "name": "foo",
              "type": "Identifier",
            },
          },
        ],
        "callee": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "type": "CallExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing map expressions should parse map expressions 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "properties": Array [
          Object {
            "computed": false,
            "key": Object {
              "name": "a",
              "type": "Identifier",
            },
            "type": "ObjectProperty",
            "value": Object {
              "type": "StringLiteral",
              "value": "foo",
            },
          },
          Object {
            "computed": true,
            "key": Object {
              "left": Object {
                "type": "StringLiteral",
                "value": "b",
              },
              "operator": "~",
              "right": Object {
                "name": "ar",
                "type": "Identifier",
              },
              "type": "BinaryConcatExpression",
              "wasImplicitConcatenation": true,
            },
            "type": "ObjectProperty",
            "value": Object {
              "type": "StringLiteral",
              "value": "bar",
            },
          },
          Object {
            "computed": false,
            "key": Object {
              "type": "NumericLiteral",
              "value": 2,
            },
            "type": "ObjectProperty",
            "value": Object {
              "type": "NumericLiteral",
              "value": 4,
            },
          },
          Object {
            "computed": true,
            "key": Object {
              "name": "a",
              "type": "Identifier",
            },
            "type": "ObjectProperty",
            "value": Object {
              "name": "foo",
              "type": "Identifier",
            },
          },
        ],
        "type": "ObjectExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing operators should match binary operators 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "left": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "operator": "in",
        "right": Object {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "BinaryExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing operators should match mixed operators 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "argument": Object {
          "left": Object {
            "name": "foo",
            "type": "Identifier",
          },
          "operator": "in",
          "right": Object {
            "name": "bar",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "not",
        "type": "UnaryExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing operators should match self-parsing binary operators 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "argument": Object {
          "left": Object {
            "name": "foo",
            "type": "Identifier",
          },
          "operator": "is",
          "right": Object {
            "name": "defined",
            "type": "Identifier",
          },
          "type": "BinaryExpression",
        },
        "operator": "not",
        "type": "UnaryExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing operators should match unary operators 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "argument": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "operator": "not",
        "type": "UnaryExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing slice expressions should match a full-slice expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "end": Object {
          "type": "NumericLiteral",
          "value": 5,
        },
        "start": Object {
          "type": "NumericLiteral",
          "value": 3,
        },
        "target": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "SliceExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing slice expressions should match a post-slice expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "end": null,
        "start": Object {
          "type": "NumericLiteral",
          "value": 2,
        },
        "target": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "SliceExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing slice expressions should match a pre-slice expression 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "end": Object {
          "type": "NumericLiteral",
          "value": 2,
        },
        "start": null,
        "target": Object {
          "name": "foo",
          "type": "Identifier",
        },
        "type": "SliceExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing slice expressions should match a slice expression on a member 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "end": Object {
          "type": "NumericLiteral",
          "value": 5,
        },
        "start": Object {
          "type": "NumericLiteral",
          "value": 3,
        },
        "target": Object {
          "computed": false,
          "object": Object {
            "name": "foo",
            "type": "Identifier",
          },
          "property": Object {
            "name": "bar",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "type": "SliceExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing slice expressions should match a slice expression with an expression range 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "end": Object {
          "computed": true,
          "object": Object {
            "name": "range",
            "type": "Identifier",
          },
          "property": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "start": Object {
          "computed": false,
          "object": Object {
            "name": "range",
            "type": "Identifier",
          },
          "property": Object {
            "name": "start",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "target": Object {
          "name": "hello",
          "type": "Identifier",
        },
        "type": "SliceExpression",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing strings should match a complex string concat 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "left": Object {
          "left": Object {
            "type": "StringLiteral",
            "value": " foo ",
          },
          "operator": "~",
          "right": Object {
            "name": "bar",
            "type": "Identifier",
          },
          "type": "BinaryConcatExpression",
          "wasImplicitConcatenation": false,
        },
        "operator": "~",
        "right": Object {
          "type": "StringLiteral",
          "value": " ",
        },
        "type": "BinaryConcatExpression",
        "wasImplicitConcatenation": true,
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing strings should match a string 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "type": "StringLiteral",
        "value": "foo",
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing strings should match an interpolated string 1`] = `
Object {
  "expressions": Array [
    Object {
      "trimLeft": false,
      "trimRight": false,
      "type": "PrintExpressionStatement",
      "value": Object {
        "left": Object {
          "type": "StringLiteral",
          "value": "foo ",
        },
        "operator": "~",
        "right": Object {
          "name": "bar",
          "type": "Identifier",
        },
        "type": "BinaryConcatExpression",
        "wasImplicitConcatenation": true,
      },
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing strings should match unicode characters 1`] = `
Object {
  "expressions": Array [
    Object {
      "attributes": Array [
        Object {
          "name": Object {
            "name": "class",
            "type": "Identifier",
          },
          "type": "Attribute",
          "value": Object {
            "type": "StringLiteral",
            "value": "item__mini-icon fl-leading hide-text border-radius  icon-icn_smilie2_light ",
          },
        },
      ],
      "children": Array [
        Object {
          "type": "PrintTextStatement",
          "value": Object {
            "type": "StringLiteral",
            "value": "“Good”",
          },
        },
      ],
      "elementNameLoc": Object {
        "column": 1,
        "index": 1,
        "line": 1,
      },
      "name": "em",
      "selfClosing": false,
      "type": "Element",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing tags should fail on unknown tags 1`] = `
"ERROR: Unknown tag \\"unknown_tag\\"
> 1 | {% unknown_tag %}
    |    ^^^^^^^^^^^

Expected a known tag such as
- "
`;

exports[`Parser when parsing tags should match tags 1`] = `
Object {
  "expressions": Array [
    Object {
      "alternate": Object {
        "expressions": Array [
          Object {
            "type": "PrintTextStatement",
            "value": Object {
              "type": "StringLiteral",
              "value": "hello universe",
            },
          },
        ],
        "type": "SequenceExpression",
      },
      "consequent": Object {
        "expressions": Array [
          Object {
            "type": "PrintTextStatement",
            "value": Object {
              "type": "StringLiteral",
              "value": "hello ",
            },
          },
          Object {
            "trimLeft": false,
            "trimRight": false,
            "type": "PrintExpressionStatement",
            "value": Object {
              "name": "adjective",
              "type": "Identifier",
            },
          },
          Object {
            "type": "PrintTextStatement",
            "value": Object {
              "type": "StringLiteral",
              "value": " world",
            },
          },
        ],
        "type": "SequenceExpression",
      },
      "tagNameLoc": Object {
        "column": 3,
        "index": 3,
        "line": 1,
      },
      "test": Object {
        "name": "foo",
        "type": "Identifier",
      },
      "trimLeft": false,
      "trimRight": false,
      "type": "ConditionalExpression",
    },
  ],
  "type": "SequenceExpression",
}
`;

exports[`Parser when parsing tags should parse an unknown "header" tag 1`] = `
Object {
  "parts": Array [
    Object {
      "left": Object {
        "type": "StringLiteral",
        "value": "Cache-Control: max-age=",
      },
      "operator": "~",
      "right": Object {
        "left": Object {
          "computed": false,
          "object": Object {
            "name": "expiry",
            "type": "Identifier",
          },
          "property": Object {
            "name": "timestamp",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "operator": "-",
        "right": Object {
          "computed": false,
          "object": Object {
            "name": "now",
            "type": "Identifier",
          },
          "property": Object {
            "name": "timestamp",
            "type": "Identifier",
          },
          "type": "MemberExpression",
        },
        "type": "BinarySubExpression",
      },
      "type": "BinaryConcatExpression",
      "wasImplicitConcatenation": false,
    },
  ],
  "sections": Array [],
  "tagName": "header",
  "tagNameLoc": Object {
    "column": 3,
    "index": 3,
    "line": 1,
  },
  "trimLeft": false,
  "trimRight": false,
  "type": "GenericTwigTag",
}
`;

exports[`Parser when parsing tags should parse an unknown "paginate" tag 1`] = `
Object {
  "parts": Array [
    Object {
      "arguments": Array [
        Object {
          "type": "NumericLiteral",
          "value": 10,
        },
      ],
      "callee": Object {
        "computed": false,
        "object": Object {
          "arguments": Array [
            Object {
              "type": "StringLiteral",
              "value": "blog",
            },
          ],
          "callee": Object {
            "computed": false,
            "object": Object {
              "name": "entries",
              "type": "Identifier",
            },
            "property": Object {
              "name": "section",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
          "type": "CallExpression",
        },
        "property": Object {
          "name": "limit",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "type": "CallExpression",
    },
    Object {
      "name": "as",
      "type": "Identifier",
    },
    Object {
      "name": "pageInfo",
      "type": "Identifier",
    },
    Object {
      "tokenText": ",",
      "tokenType": ",",
      "type": "GenericToken",
    },
    Object {
      "name": "pageEntries",
      "type": "Identifier",
    },
  ],
  "sections": Array [],
  "tagName": "paginate",
  "tagNameLoc": Object {
    "column": 3,
    "index": 3,
    "line": 1,
  },
  "trimLeft": false,
  "trimRight": false,
  "type": "GenericTwigTag",
}
`;

exports[`Parser when parsing tags should parse expressions in unknown tags 1`] = `
Object {
  "parts": Array [
    Object {
      "left": Object {
        "name": "a",
        "type": "Identifier",
      },
      "operator": "+",
      "right": Object {
        "name": "b",
        "type": "Identifier",
      },
      "type": "BinaryAddExpression",
    },
  ],
  "sections": Array [],
  "tagName": "exit",
  "tagNameLoc": Object {
    "column": 3,
    "index": 3,
    "line": 1,
  },
  "trimLeft": false,
  "trimRight": false,
  "type": "GenericTwigTag",
}
`;

exports[`Parser when parsing tags should preserve whitespace control information 1`] = `
Object {
  "expressions": Array [
    Object {
      "assignments": Array [
        Object {
          "name": Object {
            "name": "count",
            "type": "Identifier",
          },
          "type": "VariableDeclarationStatement",
          "value": Object {
            "type": "NumericLiteral",
            "value": 0,
          },
        },
      ],
      "tagNameLoc": Object {
        "column": 4,
        "index": 4,
        "line": 1,
      },
      "trimLeft": true,
      "trimLeftEndset": false,
      "trimRight": true,
      "trimRightSet": false,
      "type": "SetStatement",
    },
  ],
  "type": "SequenceExpression",
}
`;
